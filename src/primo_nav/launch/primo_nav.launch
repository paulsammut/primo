<?xml version="1.0"?>
<launch>

    <arg name="lanes"       default="false"/>
    <arg name="lanes_file"  default="$(find primo_nav)/lanes/out_map.yaml"/>

    <remap from="map" to="/grid_map"/>

    <node if="$(arg lanes)" pkg="map_server" type="map_server" name="map_server" args="$(arg lanes_file)">
        <remap from="map" to="lanes"/>
    </node>

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

        <!-- Send the output to the velocity smoother -->
        <remap from="cmd_vel" to="raw_cmd_vel"/>

        <rosparam file="$(find primo_nav)/config/costmap_common_params.yaml"        command="load" ns="global_costmap"/>
        <rosparam file="$(find primo_nav)/config/costmap_common_params.yaml"        command="load" ns="local_costmap"/>
        <rosparam file="$(find primo_nav)/config/local_costmap_params.yaml"         command="load"/>
        <rosparam file="$(find primo_nav)/config/global_costmap_params.yaml"        command="load"/>

        <rosparam file="$(find primo_nav)/config/base_local_planner_params.yaml"    command="load"/>
        <rosparam file="$(find primo_nav)/config/base_global_planner.yaml"          command="load"/>

		<param name="controller_frequency" value="10.0" />
		<param name="controller_patience" value="15.0" />

        <!-- Lanes switching -->
        <rosparam if="$(arg lanes)">
            global_costmap:
                plugins:
                    - {name: lanes_layer,       type: "costmap_2d::StaticLayer"}
                    - {name: obstacle_layer,    type: "costmap_2d::ObstacleLayer"}
                    - {name: inflation_layer,   type: "costmap_2d::InflationLayer"}
        </rosparam>

        <rosparam unless="$(arg lanes)">
            global_costmap:
                plugins:
                    - {name: static_layer,      type: "costmap_2d::StaticLayer"}
                    - {name: obstacle_layer,    type: "costmap_2d::ObstacleLayer"}
                    - {name: inflation_layer,   type: "costmap_2d::InflationLayer"}
        </rosparam>

    </node>

</launch>
