<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- 
         Launch the ZED camera with:
         * low res and low framerate
         * no tf publishing
         * publish the URDF of camera internals. ZED creates a link tree rooting to zed_center
     -->

    <arg name="node_space"       value="/stereo3"/>
    <arg name="respawn"         value="true"/>

    <group ns="$(arg node_space)">

        <!-- Create a nodelet manager  -->
        <node pkg="nodelet" type="nodelet" name="nodelet_manager"  args="manager"
            output="screen"/>

        <arg     if="$(arg respawn)" name="bond" value="" />
        <arg unless="$(arg respawn)" name="bond" value="--no-bond" />

        <arg name="camera_model"        default="0" /> <!-- 0=ZED, 1=ZEDM-->
        <arg name="svo_file"            default="" /> <!-- <arg name="svo_file" default="path/to/svo/file.svo"> -->
        <arg name="zed_id"              default="0" />

        <arg name="serial_number"       default="2747" /> 

        <!-- GPU ID-->
        <arg name="gpu_id"              default="-1" />

        <!-- Definition coordinate frames -->
        <arg name="publish_tf"          default="false" />
        <arg name="odometry_frame"      default="zed_odom" />
        <arg name="base_frame"          default="zed_center" />
        <arg name="camera_frame"        default="zed_left_camera" />
        <arg name="depth_frame"         default="zed_depth_camera" />

        <!-- Publish urdf zed -->
        <arg name="publish_urdf"        default="true" />

        <node pkg="nodelet" type="nodelet" name="stereo3_nodelet"
            args="load zed_wrapper/ZEDWrapperNodelet $(arg node_space)/nodelet_manager $(arg bond)"
            respawn="$(arg respawn)">

            <param name="camera_model"              value="$(arg camera_model)" />

            <!-- publish odometry frame -->
            <param name="publish_tf"                value="$(arg publish_tf)" />

            <!-- Configuration frame camera -->    
            <param name="odometry_frame"            value="$(arg odometry_frame)" />
            <param name="base_frame"                value="$(arg base_frame)" />
            <param name="camera_frame"              value="$(arg camera_frame)" />
            <param name="depth_frame"               value="$(arg depth_frame)" />

            <!-- SVO file path -->
            <param name="svo_filepath"              value="$(arg svo_file)" />

            <!-- ZED parameters -->
            <param name="zed_id"                    value="$(arg zed_id)" />
            <param name="serial_number"             value="$(arg serial_number)" />

            <!--
             0    HD2K,     2208*1242,  available framerates: 15 fps.*/
             1    HD1080,   1920*1080,  available framerates: 15, 30 fps.*/
             2    HD720,    1280*720,   available framerates: 15, 30, 60 fps.*/
             3    VGA,      672*376,    available framerates: 15, 30, 60, 100 fps.*/
             4    LAST
             -->
            <param name="resolution"                value="3" />

            <param name="quality"                   value="1" />
            <param name="sensing_mode"              value="0" />
            <param name="frame_rate"                value="15" />
            <param name="odometry_db"               value="" />
            <param name="openni_depth_mode"         value="0" />
            <param name="gpu_id"                    value="$(arg gpu_id)" />
            <param name="confidence"                value="25" />
            <param name="depth_stabilization"       value="1" />

            <!-- ROS topic names -->
            <param name="rgb_topic"                 value="rgb/image_rect_color" />
            <param name="rgb_raw_topic"             value="rgb/image_raw_color" />
            <param name="rgb_cam_info_topic"        value="rgb/camera_info" />
            <param name="rgb_cam_info_raw_topic"    value="rgb/camera_info_raw" />

            <param name="left_topic"                value="left/image_rect_color" />
            <param name="left_raw_topic"            value="left/image_raw_color" />
            <param name="left_cam_info_topic"       value="left/camera_info" />
            <param name="left_cam_info_raw_topic"   value="left/camera_info_raw" />

            <param name="right_topic"               value="right/image_rect_color" />
            <param name="right_raw_topic"           value="right/image_raw_color" />
            <param name="right_cam_info_topic"      value="right/camera_info" />
            <param name="right_cam_info_raw_topic"  value="right/camera_info_raw" />

            <param name="depth_topic"               value="depth/depth_registered" />
            <param name="depth_cam_info_topic"      value="depth/camera_info" />

            <param name="point_cloud_topic"         value="point_cloud/cloud_registered" />

            <param name="odometry_topic"            value="odom" />

        </node>

        <!-- ROS URDF description of the ZED -->
        <group if="$(arg publish_urdf)">
            <param if="$(arg camera_model)" name="zed_description" textfile="$(find zed_wrapper)/urdf/zedm.urdf" />
            <param unless="$(arg camera_model)" name="zed_description" textfile="$(find zed_wrapper)/urdf/zed.urdf" />
            <node name="zed_state_publisher" pkg="robot_state_publisher" type="state_publisher">
                <remap from="robot_description" to="zed_description" />
            </node>
        </group>

        <!-- Add a voxel downsampler -->
        <node pkg="nodelet" type="nodelet" name="vxl" 
            args="load pcl/VoxelGrid $(arg node_space)/nodelet_manager" output="screen">
            <remap from="~input" to="$(arg node_space)/point_cloud/cloud_registered" />
            <param name="leaf_size"             value="0.03"/>
            <param name="filter_field_name"     value="x"/>
            <param name="filter_limit_min"      value="-100"/>
            <param name="filter_limit_max"      value="100"/>
            <param name="filter_limit_negative" value="false"/>
        </node>

    </group>

</launch>
